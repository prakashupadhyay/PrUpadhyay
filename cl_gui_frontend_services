REPORT ypra_frontend_demo NO STANDARD PAGE HEADING MESSAGE-ID ypra_msgid.

****** Includes Defined for Data Declaration/Screen Elements/Class Definition.

INCLUDE ypra_frontendservices_top.  " Data Declaration
INCLUDE ypra_frontendservices_scr.  " Screen Elements
INCLUDE ypra_frontendservices_cls.  " Class Definitions

******************** INITIALIZATION ***********************************
INITIALIZATION.
  CREATE OBJECT o_mh_local_enhancement. " Defining Local Class Object

******************* AT SELECTION SCREEN OUTPUT ************************
AT SELECTION-SCREEN OUTPUT.
  CALL METHOD o_mh_local_enhancement->screen_output. " Method for defining at screen output.

******************* START-OF-SELECTION ********************************
START-OF-SELECTION.

  CALL METHOD o_mh_local_enhancement->frontendservices_class_demo. " Method for performing all the FrontEnd Service Method
  
INCLUDE ypra_frontendservices_top.  " Data Declaration
TYPE-POOLS: abap.
**** Data Declarations
DATA: it_filetable    TYPE filetable,      " Table for storing files
      is_filetable    TYPE file_table,
      rc              TYPE i,
      lv_file         TYPE string,
      lv_file_size    TYPE i,
      lv_window_title TYPE string,
      lv_user_action  TYPE i,
      lv_file_count   TYPE i,

      lv_result       TYPE abap_bool,
      lv_multi        TYPE abap_bool,
      lv_readonly     TYPE abap_bool,
      lv_normal       TYPE abap_bool,
      lv_hidden       TYPE abap_bool,
      lv_archive      TYPE abap_bool,

      lv_file_from    TYPE string,
      lv_file_to      TYPE string,
      lv_path         TYPE string,
      lv_fullpath     TYPE string,
      lv_sel_folder   TYPE string.
      
INCLUDE YPRA_FRONTENDSERVICES_SCR.   " Screen Elements
**** Selection Screens
SELECTION-SCREEN BEGIN OF BLOCK p1 WITH FRAME TITLE text-001.
PARAMETERS: p_filsel RADIOBUTTON GROUP rb1 DEFAULT 'X' USER-COMMAND radbut1,
            p_filexi RADIOBUTTON GROUP rb1,
            p_filatt RADIOBUTTON GROUP rb1,
            p_filcpy RADIOBUTTON GROUP rb1,
            p_fildel RADIOBUTTON GROUP rb1.
SELECTION-SCREEN SKIP.


PARAMETERS: p_dirsel RADIOBUTTON GROUP rb1,
            p_direxi RADIOBUTTON GROUP rb1,
            p_dirlst RADIOBUTTON GROUP rb1,
            p_dircrt RADIOBUTTON GROUP rb1,
            p_dirdel RADIOBUTTON GROUP rb1,
            p_dir    TYPE char100 MODIF ID m1 LOWER CASE.
SELECTION-SCREEN END OF BLOCK p1.

INCLUDE YPRA_FRONTENDSERVICES_CLS.   " Class Definitions
CLASS lcl_mh_local_enhancement DEFINITION.
  PUBLIC SECTION.
    METHODS:
    screen_output.                    " At the selection screen output
    file_select.                      " Method for File Selection
    file_existence_check.             " Method for checking the existence of file
    file_attributes.                  " Method for checking the attributes of file
    file_save.                        " Method for Saving the file
    file_copy.                        " Method for Copying the file
    file_delete.                      " Method for Deleting the file
    directory_select.                 " Method for Selecting the Directory
    directory_list.                   " Method for Listing the Directory
    directory_check.                  " Method for Checking the Directory
    directory_create.                 " Method for Creating the Directory
    directory_delete.                 " Method for Deleting the Directory
    frontendservices_class_demo.      " Method for Performing all the above Methods
ENDCLASS.

CLASS lcl_mh_local_enhancement IMPLEMENTATION.
  METHOD screen_output.
    LOOP AT SCREEN.
      IF ( p_dircrt EQ 'X' OR p_dirdel EQ 'X' ).
        IF screen-group1 EQ 'm1'.
          MOVE '1' TO screen-input.
          MOVE '0' TO screen-invisible.
          MODIFY SCREEN.
        ENDIF.
      ELSE.
        IF screen-group1 EQ 'm1'.
          MOVE '0' TO screen-input.
          MOVE '1' TO screen-invisible.
          MODIFY SCREEN.
        ENDIF.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


******* File Selection Method ******************
  METHOD file_select.

    REFRESH: it_filetable.
    CLEAR:   rc.

    CALL METHOD cl_gui_frontend_services=>file_open_dialog
      EXPORTING
        window_title            = lv_window_title
        default_extension       = '*.txt'
        file_filter             = '*.txt'
        multiselection          = lv_multi
      CHANGING
        file_table              = it_filetable
        rc                      = rc
      EXCEPTIONS
        file_open_dialog_failed = 1
        cntl_error              = 2
        error_no_gui            = 3
        not_supported_by_gui    = 4
        OTHERS                  = 5.

    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      IF ( p_filcpy NE 'X' AND p_fildel NE 'X' ).
        WRITE :/ 'List of file(s) selected'.
        WRITE :/ '========================'.
        LOOP AT it_filetable INTO is_filetable.
          WRITE :/ is_filetable-filename.
        ENDLOOP.
      ELSEIF p_filcpy EQ 'X'.
        CLEAR : is_filetable.
        READ TABLE it_filetable INTO is_filetable INDEX 1.
        IF sy-subrc EQ 0.
          MOVE is_filetable-filename TO lv_file_from.
        ELSE.
          MESSAGE 'No File Selected for Copy.' TYPE 'I' DISPLAY LIKE 'E'.
          STOP.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDSELECT.
endmethod.

***** File Save Method ********
  METHOD file_save.

    CLEAR : lv_file_to, lv_path, lv_fullpath, lv_user_action.
    CALL METHOD cl_gui_frontend_services=>file_save_dialog
      EXPORTING
        window_title         = lv_window_title
        default_extension    = '*.txt'
        prompt_on_overwrite  = 'X'
      CHANGING
        filename             = lv_file_to
        path                 = lv_path
        fullpath             = lv_fullpath
        user_action          = lv_user_action
      EXCEPTIONS
        cntl_error           = 1
        error_no_gui         = 2
        not_supported_by_gui = 3
        OTHERS               = 4.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      IF lv_user_action = 9.        "user cancelled the action".
        MESSAGE 'No file Selected as Destination to copy' TYPE 'I' DISPLAY LIKE 'E'.
        STOP.
      ELSE.
        MOVE lv_fullpath TO lv_file_to.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " FILE_SAVE


***** File Existence Check Method ***********
  METHOD file_existence_check .
    IF it_filetable[] IS NOT INITIAL.
      WRITE :/ 'Existence Check of Files'.
      WRITE :/ '========================'.
      LOOP AT it_filetable INTO is_filetable.
        CLEAR : lv_file, lv_result.
        MOVE is_filetable-filename TO lv_file.
        CALL METHOD cl_gui_frontend_services=>file_exist
          EXPORTING
            file                 = lv_file
          RECEIVING
            result               = lv_result
          EXCEPTIONS
            cntl_error           = 1
            error_no_gui         = 2
            wrong_parameter      = 3
            not_supported_by_gui = 4
            OTHERS               = 5.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ELSE.
          IF lv_result = abap_true.
            CONDENSE lv_file.
            CONCATENATE lv_file 'Exists' INTO lv_file SEPARATED BY space.
          ELSE.
            CONCATENATE lv_file 'Not Exists' INTO lv_file SEPARATED BY space.
          ENDIF.
          WRITE :/ lv_file.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.                    " FILE_EXISTENCE_CHECK



****** File Attributes Method ********
  METHOD file_attributes .
    IF it_filetable[] IS NOT INITIAL.
      WRITE :/ 'File Attributes Display'.
      WRITE :/ '======================='.
      LOOP AT it_filetable INTO is_filetable.
        MOVE is_filetable-filename TO lv_file.
        CLEAR : lv_readonly, lv_normal, lv_hidden, lv_archive.
        CALL METHOD cl_gui_frontend_services=>file_get_attributes
          EXPORTING
            filename                   = lv_file
          IMPORTING
            readonly                   = lv_readonly
            normal                     = lv_normal
            hidden                     = lv_hidden
            archive                    = lv_archive
          EXCEPTIONS
            cntl_error                 = 1
            error_no_gui               = 2
            not_supported_by_gui       = 3
            wrong_parameter            = 4
            file_get_attributes_failed = 5
            OTHERS                     = 6.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ELSE.
          WRITE :/ lv_file.
          WRITE :/ '--------------------------'.
          WRITE :/ 'Read Only : ' , lv_readonly.
          WRITE :/ 'Normal    : ' , lv_normal.
          WRITE :/ 'Hidden    : ' , lv_hidden.
          WRITE :/ 'Archive   : ' , lv_archive.
        ENDIF.

      ENDLOOP.
    ENDIF.
  ENDMETHOD.                    " FILE_ATTRIBUTES

******* File Copy Method *********
  METHOD file_copy .
    IF lv_file_from IS NOT INITIAL AND lv_file_to IS NOT INITIAL.
      CALL METHOD cl_gui_frontend_services=>file_copy
        EXPORTING
          source               = lv_file_from
          destination          = lv_file_to
          overwrite            = space
        EXCEPTIONS
          cntl_error           = 1
          error_no_gui         = 2
          wrong_parameter      = 3
          disk_full            = 4
          access_denied        = 5
          file_not_found       = 6
          destination_exists   = 7
          unknown_error        = 8
          path_not_found       = 9
          disk_write_protect   = 10
          drive_not_ready      = 11
          not_supported_by_gui = 12
          OTHERS               = 13.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        MESSAGE 'File Copied' TYPE 'I'.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " FILE_COPY


******* File Delete ********

  METHOD file_delete .
    IF it_filetable[] IS NOT INITIAL.
      CLEAR : is_filetable, rc.
      READ TABLE it_filetable INTO is_filetable INDEX 1.
      IF sy-subrc EQ 0.
        CLEAR : lv_file.
        MOVE is_filetable-filename TO lv_file.
        CALL METHOD cl_gui_frontend_services=>file_delete
          EXPORTING
            filename             = lv_file
          CHANGING
            rc                   = rc
          EXCEPTIONS
            file_delete_failed   = 1
            cntl_error           = 2
            error_no_gui         = 3
            file_not_found       = 4
            access_denied        = 5
            unknown_error        = 6
            not_supported_by_gui = 7
            wrong_parameter      = 8
            OTHERS               = 9.
        IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                     WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ELSE.
          IF rc EQ 0.
            MESSAGE 'File deleted Successfully.' TYPE 'I'.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " FILE_DELETE


******** Directory Selection ***********
  METHOD directory_select .
    CLEAR : lv_sel_folder.
    CALL METHOD cl_gui_frontend_services=>directory_browse
      EXPORTING
        window_title         = lv_window_title
      CHANGING
        selected_folder      = lv_sel_folder
      EXCEPTIONS
        cntl_error           = 1
        error_no_gui         = 2
        not_supported_by_gui = 3
        OTHERS               = 4.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      WRITE :/ 'Selected Folder is ', lv_sel_folder.
    ENDIF.
  ENDMETHOD.                    " DIRECTORY_SELECT


***** Directory Check Method ********
  METHOD directory_check .
    IF lv_sel_folder IS NOT INITIAL.
      CLEAR : lv_result.
      CALL METHOD cl_gui_frontend_services=>directory_exist
        EXPORTING
          directory            = lv_sel_folder
        RECEIVING
          result               = lv_result
        EXCEPTIONS
          cntl_error           = 1
          error_no_gui         = 2
          wrong_parameter      = 3
          not_supported_by_gui = 4
          OTHERS               = 5.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        IF lv_result EQ abap_true.
          WRITE :/ 'Directory', lv_sel_folder,  'Exists'.
        ELSE.
          WRITE :/ 'Directory', lv_sel_folder, 'Not Exists'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " DIRECTORY_CHECK



********* Directory List Method ***********
  METHOD directory_list .
    IF lv_sel_folder IS NOT INITIAL.
      REFRESH : it_filetable.
      CLEAR : lv_file_count.
      CALL METHOD cl_gui_frontend_services=>directory_list_files
        EXPORTING
          directory                   = lv_sel_folder
          filter                      = '*.*'
          files_only                  = abap_false
          directories_only            = abap_false
        CHANGING
          file_table                  = it_filetable
          count                       = lv_file_count
        EXCEPTIONS
          cntl_error                  = 1
          directory_list_files_failed = 2
          wrong_parameter             = 3
          error_no_gui                = 4
          not_supported_by_gui        = 5
          OTHERS                      = 6.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        WRITE :/ 'No of Sub Directory/Files ', lv_file_count.
        WRITE :/ 'Directory List'.
        WRITE :/ '--------------'.
        LOOP AT it_filetable INTO is_filetable.
          WRITE :/ is_filetable-filename.
        ENDLOOP.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " DIRECTORY_LIST


********** Directory Create Method **************

  METHOD directory_create .
    IF lv_sel_folder IS NOT INITIAL.
      CLEAR :rc.
      CALL METHOD cl_gui_frontend_services=>directory_create
        EXPORTING
          directory                = lv_sel_folder
        CHANGING
          rc                       = rc
        EXCEPTIONS
          directory_create_failed  = 1
          cntl_error               = 2
          error_no_gui             = 3
          directory_access_denied  = 4
          directory_already_exists = 5
          path_not_found           = 6
          unknown_error            = 7
          not_supported_by_gui     = 8
          wrong_parameter          = 9
          OTHERS                   = 10.
      IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                   WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ELSE.
        IF rc EQ 0.
          WRITE :/ 'Directory ', lv_sel_folder, 'Created'.
        ELSE.
          WRITE :/ 'Directory ', lv_sel_folder, 'Not Created'.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.                    " DIRECTORY_CREATE


************ Directory Delete Method *************
  METHOD directory_delete .
    IF lv_sel_folder IS NOT INITIAL.
      IF lv_result EQ abap_true.
        IF lv_file_count EQ 0.
          CALL METHOD cl_gui_frontend_services=>directory_delete
            EXPORTING
              directory               = lv_sel_folder
            CHANGING
              rc                      = rc
            EXCEPTIONS
              directory_delete_failed = 1
              cntl_error              = 2
              error_no_gui            = 3
              path_not_found          = 4
              directory_access_denied = 5
              unknown_error           = 6
              not_supported_by_gui    = 7
              wrong_parameter         = 8
              OTHERS                  = 9.
          IF sy-subrc <> 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ELSE.
            IF rc EQ 0.
              WRITE :/ 'Directory ', lv_sel_folder, 'Deleted'.
            ELSE.
              WRITE :/ 'Directory ', lv_sel_folder, 'Not Deleted'.
            ENDIF.
          ENDIF.
        ELSE.
          WRITE :/ 'Directory is not empty'.
        ENDIF.
      ELSE.
        WRITE :/ 'Directory Doesnt Exists'.
      ENDIF.
    ENDIF.
  ENDMETHOD.


  METHOD frontendservices_class_demo.
    IF p_filsel EQ 'X'.
      MOVE abap_true TO lv_multi.
      MOVE 'Select the Files' TO lv_window_title.
      CALL METHOD me->file_select.
    ENDIF.

    IF p_filexi EQ 'X'.
      MOVE abap_true TO lv_multi.
      MOVE 'Select the Files' TO lv_window_title.
      CALL METHOD me->file_select.
      CALL METHOD me->file_existence_check.
    ENDIF.

    IF p_filatt EQ 'X'.
      MOVE abap_true TO lv_multi.
      MOVE 'Select the Files' TO lv_window_title.
      CALL METHOD me->file_select.
      CALL METHOD me->file_attributes.
    ENDIF.

    IF p_filcpy EQ 'X'.
      MOVE abap_true TO lv_multi.
      CLEAR: lv_file_from, lv_file_to.
      MOVE 'Select the Source Files to Copy' TO lv_window_title.
      CALL METHOD me->file_select.
      MOVE 'Select Destination File' TO lv_window_title.
      CALL METHOD me->file_save.
      CALL METHOD me->file_copy.
    ENDIF.

    IF p_fildel EQ 'X'.
      MOVE abap_true TO lv_multi.
      CLEAR: lv_file.
      MOVE 'Select the File to Delete' TO lv_window_title.
      CALL METHOD me->file_select.
      CALL METHOD e->file_delete.
    ENDIF.

    IF p_dirsel EQ 'X'.
      MOVE 'Select the Directory' TO lv_window_title.
      CALL METHOD me->directory_select.
    ENDIF.

    IF p_direxi EQ 'X'.
      MOVE 'Select the Directory' TO lv_window_title.
      CALL METHOD me->directory_select.
      CALL METHOD me->directory_check.
    ENDIF.

    IF p_dirlst EQ 'X'.
      MOVE 'Select the Directory' TO lv_window_title.
      CALL METHOD me->directory_select.
      CALL METHOD me->directory_list.
    ENDIF.

    IF p_dircrt EQ 'X'.
      MOVE p_dir TO lv_sel_folder.
      CALL METHOD me->directory_check.
      CALL METHOD me->directory_create.
    ENDIF.

    IF p_dirdel EQ 'X'.
      MOVE p_dir TO lv_sel_folder.
      CALL METHOD me->directory_check.
      CALL METHOD me->directory_list.
      CALL METHOD me->directory_delete.
    ENDIF.
  ENDMETHOD.
ENDCLASS.

DATA o_mh_local_enhancement TYPE REF TO lcl_mh_local_enhancement.

